[
  {
    "href": "sample_python.html#some-graphics",
    "title": "Quarto + RMD + Github Pages Test",
    "section": "Some graphics",
    "text": "Taken from matplotlib.org gallery.\n\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n\n# Fixing random state for reproducibility\nnp.random.seed(19680801)\n\nfig, axs = plt.subplots(2, 2)\ncmaps = ['RdBu_r', 'viridis']\nfor col in range(2):\n    for row in range(2):\n        ax = axs[row, col]\n        pcm = ax.pcolormesh(np.random.random((20, 20)) * (col + 1),\n                            cmap=cmaps[col])\n    fig.colorbar(pcm, ax=axs[:, col], shrink=0.6)\nplt.show()"
  },
  {
    "href": "sample_python.html#rosalind-problems",
    "title": "Quarto + RMD + Github Pages Test",
    "section": "Rosalind problems",
    "text": "Just some solutions to some basic Project Rosalind problems.\n\nComplementing a Strand of DNA\n\nSample Input\nAAAACCCGGT\n\n\nSample Output\nACCGGGTTTT\n\ndef reverse_complement(nuc_sequence):\n    \"\"\"\n    Returns the reverse complement of a nucleotide sequence.\n    >>> reverse_complement('ACGT')\n    'ACGT'\n    >>> reverse_complement('ATCGTGCTGCTGTCGTCAAGAC')\n    'GTCTTGACGACAGCAGCACGAT'\n    >>> reverse_complement('TGCTAGCATCGAGTCGATCGATATATTTAGCATCAGCATT')\n    'AATGCTGATGCTAAATATATCGATCGACTCGATGCTAGCA'\n     \"\"\"\n    complements = {\n        \"A\": \"T\",\n        \"C\": \"G\",\n        \"G\": \"C\",\n        \"T\": \"A\"\n    }\n    rev_seq = \"\".join([complements[s] for s in nuc_sequence[::-1]])\n    return rev_seq\n\nimport doctest\ndoctest.run_docstring_examples(reverse_complement, globals(), verbose=True)\n\nFinding tests in NoName\nTrying:\n    reverse_complement('ACGT')\nExpecting:\n    'ACGT'\nok\nTrying:\n    reverse_complement('ATCGTGCTGCTGTCGTCAAGAC')\nExpecting:\n    'GTCTTGACGACAGCAGCACGAT'\nok\nTrying:\n    reverse_complement('TGCTAGCATCGAGTCGATCGATATATTTAGCATCAGCATT')\nExpecting:\n    'AATGCTGATGCTAAATATATCGATCGACTCGATGCTAGCA'\nok\n\n\n\n\"Good!\" if reverse_complement('AAAACCCGGT') ==  'ACCGGGTTTT' else \"Not good!\"\n\n‘Good!’"
  },
  {
    "href": "sample_analysis.html#removing-amoas",
    "title": "Sample analysis",
    "section": "Removing amoAs",
    "text": "We’ll start by removing those amoAs from our data that are not present in over 30 samples across both treatments.\nWe’ll first start by counting the non-detects for each amoA.\n\nnon_detect_counts <- data.raw.long %>%\n  group_by(fert_level, amoA) %>% \n  count(CT == 40) %>% \n  rename(non_detect = `CT == 40`) %>%\n  filter(non_detect == TRUE)\n\nFinding the amoAs that are not detected in > 30 across both samples\n\nremoves <- non_detect_counts %>% \n  pivot_wider(names_from = fert_level, values_from = n, names_prefix = \"fert.\") %>%\n  filter(fert.0 > 30 & fert.336 > 30) %>%\n  pivot_longer(cols = fert.0:fert.336, names_to = \"fert_level\", values_to = \"n\")\n\nWe’ll now reduce data.priming by removing those amoAs that are largely non-detects. We’ll also update the long version while we’re at it\n\ndata.priming.reduced <- data.priming %>% \n  select(-one_of(removes$amoA))\n\ndata.priming.reduced.long <- data.priming.reduced %>% \n  select(-sample_id, field_rep) %>% \n  pivot_longer(cols = amoA.001:amoA.074) \n\nHere’s a barchart of what we’re removing:\n\nremoves %>% \n  mutate(amoA = str_sub(amoA, -3)) %>% \n  mutate(favored = case_when(\n    amoA %in% c(\"006\", \"038\", \"064\", \"069\", \"071\") ~ \"Nothing\",\n    amoA %in% c(\"021\", \"028\", \"030\", \"048\", \"073\", \"075\", \"076\", \"077\", \"078\") ~ \"Non-fertilized\",\n    amoA %in% c(\"040\", \"050\", \"053\") ~ \"Fourth quadrant\",\n    TRUE ~ \"First quadrant\"\n  )) %>% \n  mutate(fert_level = str_sub(fert_level, start = 6)) %>% \n  ggplot(aes(amoA, n, fill = favored )) +\n  geom_col() +\n  facet_wrap(~ fert_level) + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    strip.background = element_rect(size = 1, color = \"black\", fill = \"NA\"),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_viridis_d(begin = 0, end = 0.5) +\n  scale_y_continuous(limits = c(0, 50), expand = expansion(add = c(0, 0))) +\n  scale_x_discrete(limits = rev) + \n  coord_flip() + \n  labs(\n    y = \"Number of samples with > 30 non-detects\",\n    title = \"Fertilizer level\",\n    fill = \"Favored by...\"\n  )\n\n\n\n\nNote that most of the non-detects that we’re removing are from the non-fertilized group.\nNext, we’ll convert the CT values to presence/absence for use later on.\n\namoA_presence_absence <- data.raw %>% \n  select(sample_id, starts_with(\"amoA\")) %>%\n  select(-one_of(removes$amoA)) %>%\n  mutate(across(starts_with(\"amoA\"), ~ ifelse(.x == 40, 0, 1)))"
  },
  {
    "href": "sample_analysis.html#ordination",
    "title": "Sample analysis",
    "section": "Ordination",
    "text": "Calculating the NMDS (positioning the sites):\n\nmds.priming = metaMDS(data.priming.reduced %>% select(amoA.001:amoA.074), distance = \"bray\", k = 3)\n\nsite.scores <- as.data.frame(scores(mds.priming, display = \"sites\")) %>% \n  mutate(sample_id = data.priming.reduced$sample_id,\n         Crop = data.priming.reduced$crop,\n         Fert_Level = as.factor(data.priming.reduced$fert_level),\n         Day = as.factor(data.priming.reduced$doe),\n         Substrate_Addition = as.factor(data.priming.reduced$addition))\n\nThis is enough to plot the NMDS:\n\nnmds.plot <- site.scores %>% \n  ggplot(aes(NMDS1, NMDS2, fill = Fert_Level)) +  \n  geom_hline(yintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_vline(xintercept = 0.0,\n             colour = \"grey\",\n             lty = 2) +\n  geom_point(aes(shape = Crop), size = 4) + \n    theme(\n    plot.title = element_text(hjust = 0.5),\n    legend.text = element_markdown(size = 12),\n    legend.title = element_markdown(size = 12, hjust = 0),\n    axis.text.x = element_text(size = 14),\n    axis.text.y = element_text(size = 14),\n    axis.title.x = element_text(size = 12),\n    axis.title.y = element_text(size = 12),\n    panel.grid = element_line(color = \"gray95\"),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA)\n  ) +\n  scale_fill_discrete(name = \"Fertilizer Level<br>\n                              <span style = 'font-size:8pt;'>\n                              (kg N ha<sup>-1</sup> y<sup>-1</sup>)\n                              </span>\") +\n  scale_shape_manual(labels = c(\"Corn\", \"*Miscanthus<br>Gigantus*\"),\n                     values = c(21, 24)) +\n  guides(\n    fill = guide_legend(override.aes = list(shape = 22, size = 5)),\n    shape = guide_legend(title = \"Crop\", override.aes = list(shape = c(16, 17)))\n  )  \n\nWe can also add ellipses to it if you’re interested in that:\n\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) \n\n\n\n\nAnd again with shading:\n\nnmds.plot +\n  stat_ellipse(aes(color = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE) +\n    stat_ellipse(aes(fill = Fert_Level), size = 1, linetype = \"dashed\", show.legend = FALSE, geom = \"polygon\", alpha = 0.1)"
  },
  {
    "href": "sample_analysis.html#statistics",
    "title": "Sample analysis",
    "section": "Statistics",
    "text": "Which factors have an impact on overall community composition?\n\nX <- data.priming.reduced %>% \n  select(-c(amoA.001:amoA.074))\nY <- data.priming.reduced %>% \n  select(c(amoA.001:amoA.074))\n\nadonis(Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\n\nCall:\nadonis(formula = Y ~ X$fert_level + X$addition + X$crop + X$timepoint) \n\nPermutation: free\nNumber of permutations: 999\n\nTerms added sequentially (first to last)\n\n             Df SumsOfSqs MeanSqs F.Model      R2 Pr(>F)    \nX$fert_level  1    1.4426 1.44255  56.092 0.37093  0.001 ***\nX$addition    2    0.0327 0.01633   0.635 0.00840  0.707    \nX$crop        1    0.0882 0.08823   3.431 0.02269  0.023 *  \nX$timepoint   1    0.0367 0.03671   1.427 0.00944  0.204    \nResiduals    89    2.2889 0.02572         0.58855           \nTotal        94    3.8890                 1.00000           \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nThis tells us that fertilization level is very significant and explains ~37% of the variation in our samples. Crop is also a significant factor on community composition, though it only explains 2.3% of the variation.\n\n\nHow do the treatment factors affect the “abundance” of genes on an individual level?\nAll the code below does is perform an ANOVA of the gene’s abundance against all the terms and all of their interactions.\n\nformulae <- lapply(colnames(data.priming.reduced %>% select(amoA.001:amoA.074)), function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = data.priming.reduced)))\nnames(res) <- format(formulae)\nnames(res) <- str_sub(names(res), end = 8)\n\nanova_results <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  ))\n\nVisualization:\n\nanova_results %>% \n  mutate(gene = str_sub(gene, -3)) %>% \n  ggplot(aes(gene, term, fill = sig)) + \n  geom_tile(color = \"black\") + \n  coord_equal() + \n  labs(y = \"\",\n       x = \"amoA\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 0, vjust = 0.5)\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1)\n\n\n\n\nOverall, we see that, again, fertilization level has a significant impact on abundance levels of the individual genes, and it’s not even really that close.. There are other factors that might be worth investigating on a gene-by-gene basis, too, but that’s for later."
  },
  {
    "href": "sample_analysis.html#biodiversity",
    "title": "Sample analysis",
    "section": "Biodiversity",
    "text": "Let’s start by visualizing the presence/absence table:\n\namoA_presence_absence %>% \n  pivot_longer(cols = amoA.001:amoA.074, names_to = \"amoA\", values_to = \"presence\") %>% \n  mutate(amoA = str_sub(amoA, -3),\n         presence = as.factor(presence)) %>% \n  left_join(metadata %>% rownames_to_column(var = \"sample_id\")) %>% \n  ggplot(aes(sample_id, amoA, fill = presence)) + \n  geom_tile(color = \"black\") +\n  labs(\n    x = \"\",\n    y = \"\",\n    fill = \"Species is...\",\n    title = \"Presence/absence of species in crop priming samples\",\n    subtitle = \"(separated by fertilization level)\"\n  ) + \n  scale_fill_viridis_d(labels = c(\"Absent\", \"Present\"),\n                       begin = 0, end = 1,\n                       option = \"magma\") +\n  theme(\n    axis.text.x = element_blank(),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) + \n  scale_y_discrete(limits = rev) + \n  facet_wrap(~ fert_level, scales = \"free\")\n\nJoining, by = \"sample_id\""
  },
  {
    "href": "sample_analysis.html#reading-in-the-best-blast-hit-info",
    "title": "Sample analysis",
    "section": "Reading in the best BLAST hit info:",
    "text": "amoA_organism_info <- readxl::read_xlsx(here(\"data\", \"amoa_mfp_qpcr_org_accessions.xlsx\"), sheet = 5) %>% \n  select(-c(contains(c(\"forward\", \"reverse\", \"notes\")))) \n\nCounts of best BLAST hits:\n\namoA_organism_info %>% \n  count(best_blast_hits, sort = TRUE) \n\n# A tibble: 25 x 2\n   best_blast_hits                               n\n   <chr>                                     <int>\n 1 Nitrosolobus multiformis AmoA (amoA) gene    10\n 2 Nitrosospira sp. En13 AmoA                    9\n 3 Nitrosospira multiformis ATCC 25196           7\n 4 Nitrosospira sp. Wyke8 AmoA                   7\n 5 Nitrosospira lacus strain APG3                6\n 6 Nitrosospira sp. Np39-19                      6\n 7 Nitrosospira sp. Wyke2                        4\n 8 Nitrosospira sp. NpAV                         3\n 9 Nitrosomonas sp. JL21                         2\n10 Nitrosospira briensis                         2\n# … with 15 more rows"
  },
  {
    "href": "sample_analysis.html#creating-a-phyloseq-object",
    "title": "Sample analysis",
    "section": "Creating a phyloseq object",
    "text": "amoa_tax_table <- amoA_organism_info %>% \n  select(array_name, best_blast_hits) %>% \n  column_to_rownames(var = \"array_name\") %>% \n  tax_table()\n\nrownames(amoa_tax_table) <- amoA_organism_info$array_name\n\n\nps <- phyloseq(\n  otu_table(amoA_presence_absence %>% column_to_rownames(var = \"sample_id\"), taxa_are_rows = FALSE),\n  sample_data(metadata),\n  amoa_tax_table\n)"
  },
  {
    "href": "sample_analysis.html#richness-analysis",
    "title": "Sample analysis",
    "section": "Richness analysis",
    "text": "How does observed richness and evenness change with treatment level? This is a modified diversity function that does a bunch of nice stuff that phyloseq::estimate_richness doesn’t do.\n\n\nCode\nestimate_richness_mod <- function(physeq, split=TRUE, measures=NULL){\n  \n\n  if( !split ){\n    OTU <- taxa_sums(physeq)        \n  } else if( split ){\n    OTU <- as(otu_table(physeq), \"matrix\")\n    if( taxa_are_rows(physeq) ){ OTU <- t(OTU) }\n  }\n  \n\n  renamevec = c(\"Observed\", \"Chao1\", \"ACE\", \"Shannon\", \"Pielou\", \"Simpson\", \"InvSimpson\", \"SimpsonE\", \"Fisher\")\n  names(renamevec) <- c(\"S.obs\", \"S.chao1\", \"S.ACE\", \"shannon\", \"pielou\", \"simpson\", \"invsimpson\", \"simpsone\", \"fisher\")\n\n  if( is.null(measures) ){\n    measures = as.character(renamevec)\n  }\n\n  if( any(measures %in% names(renamevec)) ){\n    measures[measures %in% names(renamevec)] <- renamevec[names(renamevec) %in% measures]\n  }\n  \n\n  if( !any(measures %in% renamevec) ){\n    stop(\"None of the `measures` you provided are supported. Try default `NULL` instead.\")\n  }\n  \n\n  outlist = vector(\"list\")\n\n  estimRmeas = c(\"Chao1\", \"Observed\", \"ACE\")\n  if( any(estimRmeas %in% measures) ){\n    outlist <- c(outlist, list(t(data.frame(estimateR(OTU)))))\n  }\n  if( \"Shannon\" %in% measures ){\n    outlist <- c(outlist, list(shannon = diversity(OTU, index=\"shannon\")))\n  }\n  if( \"Pielou\" %in% measures){\n    #print(\"Starting Pielou\")\n    outlist <- c(outlist, list(pielou = diversity(OTU, index = \"shannon\")/log(estimateR(OTU)[\"S.obs\",])))\n  }\n  if( \"Simpson\" %in% measures ){\n    outlist <- c(outlist, list(simpson = diversity(OTU, index=\"simpson\")))\n  }\n  if( \"InvSimpson\" %in% measures ){\n    outlist <- c(outlist, list(invsimpson = diversity(OTU, index=\"invsimpson\")))\n  }\n  if( \"SimpsonE\" %in% measures ){\n\n    outlist <- c(outlist, list(simpsone = diversity(OTU, index=\"invsimpson\")/estimateR(OTU)[\"S.obs\",]))\n  }\n  if( \"Fisher\" %in% measures ){\n    fisher = tryCatch(fisher.alpha(OTU, se=TRUE),\n                      warning=function(w){\n                        warning(\"phyloseq::estimate_richness: Warning in fisher.alpha(). See `?fisher.fit` or ?`fisher.alpha`. Treat fisher results with caution\")\n                        suppressWarnings(fisher.alpha(OTU, se=TRUE)[, c(\"alpha\", \"se\")])\n                      }\n    )\n    if(!is.null(dim(fisher))){\n      colnames(fisher)[1:2] <- c(\"Fisher\", \"se.fisher\")\n      outlist <- c(outlist, list(fisher))\n    } else {\n      outlist <- c(outlist, Fisher=list(fisher))\n    }\n  }\n  out = do.call(\"cbind\", outlist)\n\n  namechange = intersect(colnames(out), names(renamevec))\n  colnames(out)[colnames(out) %in% namechange] <- renamevec[namechange]\n\n  colkeep = sapply(paste0(\"(se\\\\.){0,}\", measures), grep, colnames(out), ignore.case=TRUE)\n  out = out[, sort(unique(unlist(colkeep))), drop=FALSE]\n\n  out <- as.data.frame(out)\n  return(out)\n}\n\n\n\nmetrics <- c(\"Observed\", \"Shannon\")\nrichness <- estimate_richness_mod(ps, measures = metrics) %>% \n  rownames_to_column(var = \"sample_id\") %>% \n  mutate(sample_id = str_sub(sample_id, start = 2)) \n\n\nrichness <- left_join(sample_data(ps) %>% data.frame() %>% rownames_to_column(var = \"sample_id\"), richness) %>% \n  pivot_longer(cols = Observed:Shannon, names_to = \"Metric\", values_to = \"Value\")\n\nJoining, by = \"sample_id\"\n\n\n\nStatistical tests\nSignificance test of fertilization level on richness.\n\n(sig_rich_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Observed\")))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Value by fert_level\nKruskal-Wallis chi-squared = 54.275, df = 1, p-value = 1.743e-13\n\n\nThe p-value < 0.001 gives us strong statistical evidence that richness is significantly different between fertilization treatment groups.\nSignificance test of fertilization level on richness\n\n(sig_even_fert <- kruskal.test(Value ~ fert_level, data = richness %>% filter(Metric == \"Shannon\")))\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  Value by fert_level\nKruskal-Wallis chi-squared = 54.331, df = 1, p-value = 1.694e-13\n\n\nThe p-value < 0.001 gives us strong statistical evidence that Shannon diversity is significantly different between fertilization treatment groups."
  },
  {
    "href": "sample_analysis.html#making-nice-plots-for-stat-differences",
    "title": "Sample analysis",
    "section": "Making nice plots for stat differences",
    "text": "Standard deviations, mean\n\nsummaries <- richness %>% \n  group_by(Metric, fert_level) %>% \n  summarize(mean_val = mean(Value), \n            sd_val = sd(Value) / 4,\n            .groups = \"drop\") \n\n\nthis_annotation <- data.frame(\n  Metric = c(\"Observed\", \"Shannon\"),\n  lab = c(\"***\", \"***\"),\n  x = 1.5,\n  y = c(50 + 5, 4 + 0.5),\n  lineheights = c(50 + 2, 4 + 0.25)\n)\n\nsummaries %>%  \n  ggplot(aes(fert_level, mean_val, fill = fert_level)) + \n  geom_col(color = \"black\", size = 1) +\n  facet_wrap(~ Metric, scales = \"free_y\") + \n  theme(\n    legend.position = \"none\",\n    strip.background = element_blank(),\n    axis.title.y = element_blank(),\n    strip.placement = \"outside\",\n    plot.title = element_text(hjust = 0.5),\n    strip.text.y = element_text(face = \"bold\", size = 10),\n    strip.text = element_text(face = \"bold\", size = 10),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_line(color = \"gray90\", linetype = \"dashed\"),\n    axis.ticks = element_blank(),\n    panel.border = element_rect(color = \"black\", size = 1, fill = \"NA\")\n  ) +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) + \n  geom_errorbar(aes(ymin = mean_val - sd_val, ymax = mean_val + sd_val, width = 0.5)) + \n  geom_text(\n    data = this_annotation,\n    aes(x = x, y = y, label = lab),\n    inherit.aes = FALSE,\n    size = 5\n    ) + \n  geom_segment(data = this_annotation,\n               aes(x = 1,\n                   xend = 2, \n                   y = lineheights,\n                   yend = lineheights),\n               inherit.aes = FALSE) + \n  labs(\n    x = \"Fertilization Level\\n(*** = p < 0.001 by Kruskal Wallis)\",\n    title = \"Alpha diversity metrics by fertilization level\"\n    \n  )"
  },
  {
    "href": "sample_analysis.html#beta-diversity",
    "title": "Sample analysis",
    "section": "Beta diversity",
    "text": "We’ll start beta diversity analysis off by doing an ADONIS/PERMANOVA to determine if treatment centroids/treatment variations are different between groups.\n\ndis <- vegdist(otu_table(ps))\n\nWarning in vegdist(otu_table(ps)): you have empty rows: their dissimilarities\nmay be meaningless in method \"bray\"\n\n\nWarning in vegdist(otu_table(ps)): missing values in results\n\ngroups <- sample_data(ps)$fert_level\nmod <- betadisper(dis, groups)\n\nmissing observations due to 'd' removed\n\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: Distances\n          Df  Sum Sq Mean Sq F value    Pr(>F)    \nGroups     1 0.57864 0.57864  26.104 1.745e-06 ***\nResiduals 92 2.03937 0.02217                      \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nSince p <<<< 0.0001, there is strong evidence that the overall community compositions are significantly different (treatment centroid, distance to centroid, community variation) between the two groups. W can visualize this with a 1 SD ellipse:\n\nplot(mod, ellipse = TRUE, hull = FALSE) \n\n\n\n\nWe see that there is clear separation between the two treatment centroids. Let’s do some more analysis on the distance-to-centroids that we’re seeing:\n\nbetadistances <- data.frame(\n  time_frame = mod$group,\n  distance = mod$distances\n)\n\nbetadistances %>% \n  ggplot(aes(time_frame, distance)) + \n  geom_boxplot(size = 1, outlier.shape = NA) + \n  geom_jitter(aes(fill = time_frame), size = 5, shape = 21, width = 0.2) +\n  theme(\n    legend.position = \"none\",\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.y = element_blank(),\n    # panel.grid.major.y = element_line(color = \"gray\", linetype = \"dashed\"),\n    plot.title = element_text(size = 17),\n    plot.subtitle = element_text(size = 9),\n    axis.ticks.length = unit(0.25, \"cm\"),\n    # axis.ticks.x = element_line(color = \"gray\", size = 0.25),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_text(face = \"bold\", angle = 0, size = 12),\n    panel.border = element_rect(color = \"black\", size = 1, fill = NA),\n    axis.title.x = element_blank(),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    # legend.position = \"none\"\n    \n  ) + \n  labs(\n    color = \"\",\n    y = \"Distance to centroid\"\n  ) +\n  ggsignif::geom_signif(\n    map_signif_level = TRUE,\n    comparisons = list(c(\"0\", \"336\")),\n    test = \"t.test\",\n    step_increase = 0.1,\n    color = \"black\",\n    size = 1,\n    textsize = 5,\n    tip_length = 0\n  )\n\n\n\n\nThe significance bar is coming from the PERMANOVA test we did above. We see that there is actually less beta diversity (as meaasured by distance-to-centroid) in the fertilized group than in the non- fertilized group. We’ll see another visualization backing this up in the next section:"
  },
  {
    "href": "sample_analysis.html#composition",
    "title": "Sample analysis",
    "section": "Composition",
    "text": "Let’s visualize the composition of the communities, separated by fertilization. We’ll start with raw counts - how many times was that best BLAST hit seen in that sample?\n\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\",\n             tax_transform_for_plot = \"identity\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(raw counts)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n\n\n\n\nWe see that overall the fertilized group appears to have more richness in it.\nHow about sample composition? IE, relative abundances?\n\ncomp_barplot(ps, \"ta1\",\n             facet_by = \"fert_level\",\n             sample_order =  \"default\") +\n  coord_flip() + \n  labs(\n    title = \"Sample composition by fertilization level\",\n    subtitle = \"(relative abundance)\"\n  ) + \n  theme(\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(margin = margin(r = -7)),\n    plot.title = element_text(hjust = 0.5),\n    plot.subtitle = element_text(hjust = 0.5, size = 10),\n    strip.text = element_text(size = 10, face = \"bold\")\n  ) +\n  guides(\n    fill = guide_legend(title = \"Best BLAST hit\", reverse = TRUE)\n  )\n\n\n\n\nTwo big things pop out:\n\nspecies distribution is more even in the fertilized group. This makes sense given previous results showing that Shannon entropy is higher and beta diversity is lower in the fertilized group. You can also see that the communities just look more like each other in the fertilized group, which manifests in shorter distance-to-centroids/lower community variation.\nThere’s more green in the fertilized group."
  },
  {
    "href": "sample_analysis.html#statistics-on-a-best-blast-hit-level",
    "title": "Sample analysis",
    "section": "Statistics on a best BLAST hit level",
    "text": "The next chunk is just doing some data transformation stuff to count the number of times each organism was seen in each sample in preparation for the statistical analysis.\n\npa_count <- ps %>% \n  otu_table() %>%\n  data.frame %>%\n  rownames_to_column(var = \"sample_id\") %>% \n  pivot_longer(amoA.001:amoA.074) \n\n\norg_table <- tax_table(ps) %>% \n  data.frame %>% \n  rownames_to_column(var = \"name\") %>% \n  rename(bbh = ta1) %>% \n  mutate(cleaned_names = janitor::make_clean_names(bbh))\n\nbbh_sample_counts <- left_join(pa_count, org_table, by = \"name\") %>%\n  group_by(sample_id, bbh) %>% \n  summarize(value = sum(value)) %>% \n  pivot_wider(names_from = \"bbh\", values_from = value)\n\n`summarise()` has grouped output by 'sample_id'. You can override using the `.groups` argument.\n\nbbh_level_counts <- left_join(bbh_sample_counts,\n          sample_data(ps) %>% \n            data.frame %>% \n            rownames_to_column(var = 'sample_id') %>% \n            right_join(bbh_sample_counts)\n) %>% \n  ungroup()\n\nJoining, by = \"sample_id\"\n\n\nJoining, by = c(\"sample_id\", \"Nitrosolobus multiformis AmoA (amoA) gene\", \"Nitrosospira briensis\", \"Nitrosospira lacus strain APG3\", \"Nitrosospira multiformis AmoA (amoA) gene\", \"Nitrosospira multiformis ATCC 25196\", \"Nitrosospira sp. 9SS1\", \"Nitrosospira sp. amoA and amoB\", \"Nitrosospira sp. En13 AmoA\", \"Nitrosospira sp. GS832\", \"Nitrosospira sp. NIJS16\", \"Nitrosospira sp. Np39-19\", \"Nitrosospira sp. NpAV\", \"Nitrosospira sp. PJA1\", \"Nitrosospira sp. strain Nsp.1\", \"Nitrosospira sp. strain Nsp.5\", \"Nitrosospira sp. strain Nsp.5 amoA\", \"Nitrosospira sp. TCH711\", \"Nitrosospira sp. Wyke2\", \"Nitrosospira sp. Wyke8 AmoA\", \"Nitrosovibrio sp. RY3C\", \"Nitrospira sp. amoA and amoB genes\")\n\nbbh_level_counts %>% \n  pivot_longer(cols = 2:22) \n\n# A tibble: 1,995 x 9\n   sample_id fert_level crop  timepoint doe   addition field_rep name      value\n   <chr>     <fct>      <fct> <fct>     <fct> <fct>    <fct>     <chr>     <dbl>\n 1 13b       336        corn  b         5     control  1         Nitrosol…     6\n 2 13b       336        corn  b         5     control  1         Nitrosos…     1\n 3 13b       336        corn  b         5     control  1         Nitrosos…     2\n 4 13b       336        corn  b         5     control  1         Nitrosos…     1\n 5 13b       336        corn  b         5     control  1         Nitrosos…     5\n 6 13b       336        corn  b         5     control  1         Nitrosos…     1\n 7 13b       336        corn  b         5     control  1         Nitrosos…     1\n 8 13b       336        corn  b         5     control  1         Nitrosos…     3\n 9 13b       336        corn  b         5     control  1         Nitrosos…     0\n10 13b       336        corn  b         5     control  1         Nitrosos…     1\n# … with 1,985 more rows\n\n\nHere, we’re preparing formulas to feed to a lapply function to perform a Kruskal-Wallis test on all of the organisms.\n\nformulae <- lapply(colnames(bbh_sample_counts %>% select(-sample_id) %>% janitor::clean_names()) , function(x) as.formula(paste0(x, \" ~ fert_level * crop * timepoint * addition\")))\n\nAdding missing grouping variables: `sample_id`\n\nformulae[[1]] <- NULL\n\nres <- lapply(formulae, function(x) broom::tidy(aov(x, data = bbh_level_counts %>% janitor::clean_names())))\nnames(res) <- format(formulae)\nnames(res) <- lapply(names(res), function(x) str_split(x, \"~\")[[1]][1]) %>% unlist()\n\nanova_results.counts <- lapply(seq_along(res), function(i) res[[i]] %>% mutate(gene = names(res)[[i]])) %>% \n  bind_rows() %>% \n  filter(term != \"Residuals\") %>% \n  mutate(gene = str_trim(gene))\n\nVisualizing the results again:\n\nanova_results.counts %>%\n  left_join(org_table, by = c(\"gene\" =\"cleaned_names\")) %>%\n  mutate(sig = case_when(\n    p.value < 0.05 & p.value > 0.01 ~ \"*\",\n    p.value < 0.01 & p.value > 0.001 ~ \"**\",\n    p.value < 0.001 ~ \"***\",\n    TRUE ~ \"NS\"\n  )) %>% \n  ggplot(aes(term, bbh, fill = sig)) + \n  geom_tile(color = \"black\") + \n  labs(y = \"\",\n       x = \"\",\n       title = \"Summary of ANOVA results\",\n       fill = \"Significance \") + \n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n    axis.text.y = element_text()\n  ) + \n  scale_fill_viridis_d(option = \"magma\", direction = -1) + \n  scale_y_discrete(limits = rev) +\n  coord_equal() \n\n\n\n\nWe see the same pattern at the organism level as when we did this at the gene level: fertilization level is by far the most significant factor affecting Presence/Absence of organisms."
  },
  {
    "href": "index.html#github-workflow",
    "title": "Quarto + RMD + Github Pages Test",
    "section": "Github Workflow",
    "text": ".github/workflows/\nname: Render and deploy Quarto files\non: \n  push:\n  pull_request:\n\njobs:\n  quarto-render-and-deploy:\n    runs-on: ubuntu-latest\n    env:\n      RENV_PATHS_ROOT: ~/.local/share/renv\n    steps:\n    - uses: actions/checkout@v2\n\n    - uses: actions/setup-python@v2\n\n    - name: \"Install Python deps\"\n      run: |\n        pip install -r requirements.txt\n        \n    - uses: r-lib/actions/setup-r@v1\n\n    - name: \"Install curl for Bioconductor\"\n      run: |\n        sudo apt -y install libcurl4-openssl-dev\n\n    - name: \"Install R Packages: Cache packages\"\n      uses: actions/cache@v1\n      with:\n        path: ${{ env.RENV_PATHS_ROOT }}\n        key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-renv-\n\n    - name: \"Install R Packages: Restore packages\"\n      shell: Rscript {0}\n      run: |\n        if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")\n        renv::restore()\n\n    - name: \"Install Quarto and render\"\n      uses: pommevilla/quarto-render@main\n\n    - name: \"Deploy to gh-pages\"\n      uses: peaceiris/actions-gh-pages@v3\n      if: github.ref == 'refs/heads/main'\n      with:\n        github_token: ${{ secrets.GITHUB_TOKEN }}\n        publish_dir: ./_site\nThe final results can be viewed https://pommevilla.github.io/hinterland-harbor/."
  },
  {
    "href": "index.html#you-should-probably-use-freeze",
    "title": "Quarto + RMD + Github Pages Test",
    "section": "You should probably use freeze",
    "text": "While it is an option to use quarto-render without freeze in this way, it is generally not recommended for a few reasons:\n\nYou have to version control any data sets that are used in the computation of your documents, which can be quite large.\nWhile it is good practice to version control your package dependencies, restoring them during the Github workflow creates additional opportunities for failure, especially if you are using non-CRAN libraries such as those from Bioconductor.\nRestoring packages in a workflow from renv can take a significant amount of time on the initial run. While future workflows will finish more quickly by taking advantage of the package cache, the initial run can take quite a bit of time to complete, making it difficult to troubleshoot. For example, the initial render of this repository took over 45 minutes.\nThe documents are being recomputed at render time. This means that if you have a document with a lot of expensive computations, it will take longer to complete a workflow and see your results. As a comparison, after the initial cache is created by renv, running a quarto-render workflow takes about 2 minutes, while a similar workflow that takes advantage of freeze finishes rendering its documents in under 30 seconds, even though it contains more documents with more computations.\n\nFor these reasons, it is suggested that you take advantage of the freeze execution mode for your Quarto projects. See this repo for an example Quarto project that used freeze and quarto-render to simplify the Github page publishing process."
  }
]